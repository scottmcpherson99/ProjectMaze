// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Character.h"
#include "PlayerCharacter.generated.h"

UCLASS()
class PROJECTMAZE_API APlayerCharacter : public ACharacter
{
	GENERATED_BODY()

public:
	// Sets default values for this character's properties
	APlayerCharacter();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <GettersandSetters>
	// Update the value of the number of keys the player has
	void SetKeys(int keys_);

	// Output the number of keys the player has
	int GetKeys();

	// Output the health the player has
	int GetHealth();
	// </GettersandSetters>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <PlayerCharacterInterface>
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

	// Called every frame
	virtual void Tick(float DeltaTime) override;
	// </PlayerCharacterInterface>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Components>
	// Follow camera
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = "true"))
		class UCameraComponent* FollowCamera;
	// </Components>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Input>
	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	// Called for forwards/backward input
	void MoveForward(float Value);

	// Called for side to side input
	void MoveRight(float Value);

	// Called via input to turn at a given rate.
	void Turn(float Rate);

	// Called via input to turn look up/down at a given rate.
	void LookUp(float Rate);

	// Called when the player wishes to interact with an object
	void Interact();
	// </Input>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Damage>
	virtual float TakeDamage(float damageAmount, FDamageEvent const& damageEvent, AController* eventInstigator, AActor* damageCauser);
	// </Damage>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	//  <Audio>
	// play the sound for the player's footstep
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Audio")
		class USoundBase* footstepSound;

	//timer to delay the spawning of the arrow
	FTimerHandle doOnceTimer;

	bool doOnce;

	void DoOnce();

	void ResetDoOnce();
	// </Audio>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Attributes>
	 // the number of keys the player has
	int numberOfKeys;

	// the health of the player
	int health;
	// </Attributes>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
};
